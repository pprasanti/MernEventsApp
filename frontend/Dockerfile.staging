# Fetching the latest node image on alpine linux
FROM node:19-alpine AS builder

# Declaring env
ENV NODE_ENV Staging

# Setting up the work directory
WORKDIR /app

# Installing dependencies
COPY ./package.json ./

RUN npm install

# Copying all the files in our project
COPY . .

# Building our application
RUN npm run build-stage

# Fetching the latest nginx image
FROM nginx

# Copying built assets from builder
COPY --from=builder /app/build /usr/share/nginx/html

# Copying our nginx.conf
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d/default.conf

# EXPOSE 3000 80
EXPOSE 80

# Start Nginx server
# CMD ["/bin/bash", "-c", "nginx -g \"daemon off;\""]
ENTRYPOINT ["nginx", "-g", "daemon off;"]


# # Setup Minikube
# brew install minikube
# minikube start --driver=docker
# # Setup Kubelet
# brew install kubectl

# # Setup EKS:
# docker buildx build --platform linux/amd64,linux/arm64 -t prasanti85/mernfrontend:staging -f Dockerfile.staging . --push
# kubectl create deployment mernfrontend --image=prasanti85/mernfrontend
# kubectl expose deployment mernfrontend --type=LoadBalancer --port=4000
# minikube service mernfrontend

# kubectl get deployments && kubectl get pods && kubectl get services
# kubectl delete deployment mernfrontend && kubectl delete service mernfrontend
# kubectl logs  <podname>  --all-containers

# Note : When we deploy a React app into production, we donâ€™t serve the app using the development backend. 
# We need to build a production-ready version of our app. Our final output will be in plain HTML, CSS and JS files. 
# To serve our production build, we need a web server software. Here we choose Nginx. 